name: Six-hourly Build and Release

on:
  schedule:
    - cron: "0 */6 * * *"

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    environment: npm-publish

    env:
      GO_VERSION: "1.24.0"
      NODE_VERSION: "22.x"

    steps:
      - name: Generate version number
        id: version
        run: |
          VERSION=$(date +'%Y.%-m.%-d-%H')
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout npm package repository
        uses: actions/checkout@v4
        with:
          path: npm-package

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org/
          scope: "@mxyhi"

      - name: Install hereby
        run: npm install -g hereby

      - name: Checkout TypeScript-Go repository
        uses: actions/checkout@v4
        with:
          repository: microsoft/typescript-go
          path: typescript-go
          submodules: "recursive"
          fetch-depth: 0

      - name: Generate changelog from recent commits
        id: changelog
        working-directory: ./typescript-go
        run: |
          # Get timestamp from 6 hours ago
          SIX_HOURS_AGO=$(date -d "6 hours ago" +"%Y-%m-%d %H:%M:%S")

          # Get commit logs from main branch in the last 6 hours
          CHANGELOG=$(git log main --since="$SIX_HOURS_AGO" --pretty=format:"* %h %s (%an)" --no-merges)

          # If no commits found, add default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No new commits in the last 6 hours on main branch."
          fi

          # Save changelog to output variable, handling multiline string
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # - name: Install dependencies (TypeScript-Go)
      #   working-directory: ./typescript-go
      #   run: npm ci

      # - name: Build TypeScript-Go
      #   working-directory: ./typescript-go
      #   run: |
      #     hereby build
      #     ls -la built/local

      # - name: Install GoReleaser
      #   uses: goreleaser/goreleaser-action@v5
      #   with:
      #     install-only: true

      # - name: Create temporary .goreleaser.yml
      #   working-directory: ./typescript-go
      #   run: |
      #     cat > .goreleaser.yml << EOF
      #     builds:
      #       - id: tsgo
      #         binary: tsgo
      #         main: ./cmd/tsgo
      #         ldflags:
      #           - -s -w -X main.version=${{ steps.version.outputs.version }}
      #         env:
      #           - CGO_ENABLED=0
      #         goos:
      #           - linux
      #           - windows
      #           - darwin
      #           - freebsd
      #         goarch:
      #           - amd64
      #           # - 386
      #           - arm64
      #           # - arm
      #         # ignore:
      #         #   - goos: darwin
      #         #     goarch: 386
      #         #   - goos: darwin
      #         #     goarch: arm
      #         #   - goos: windows
      #         #     goarch: arm64
      #         #   - goos: windows
      #         #     goarch: arm
      #     EOF

      # - name: Build binaries
      #   working-directory: ./typescript-go
      #   run: |
      #     goreleaser build --snapshot --clean
      #     find dist -type f | sort

      # - name: Rename binaries for clarity
      #   run: |
      #     mkdir -p ./release-artifacts

      #     cp ./typescript-go/dist/tsgo_linux_amd64_v1/tsgo ./release-artifacts/tsgo-linux-amd64
      #     # cp ./typescript-go/dist/tsgo_linux_386_v1/tsgo ./release-artifacts/tsgo-linux-386
      #     cp ./typescript-go/dist/tsgo_linux_arm64/tsgo ./release-artifacts/tsgo-linux-arm64
      #     # cp ./typescript-go/dist/tsgo_linux_arm_v7/tsgo ./release-artifacts/tsgo-linux-arm

      #     cp ./typescript-go/dist/tsgo_windows_amd64_v1/tsgo.exe ./release-artifacts/tsgo-windows-amd64.exe
      #     cp ./typescript-go/dist/tsgo_windows_arm64/tsgo.exe ./release-artifacts/tsgo-windows-arm64.exe
      #     # cp ./typescript-go/dist/tsgo_windows_386_v1/tsgo.exe ./release-artifacts/tsgo-windows-386.exe

      #     cp ./typescript-go/dist/tsgo_darwin_amd64_v1/tsgo ./release-artifacts/tsgo-darwin-amd64
      #     cp ./typescript-go/dist/tsgo_darwin_arm64/tsgo ./release-artifacts/tsgo-darwin-arm64

      #     cp ./typescript-go/dist/tsgo_freebsd_amd64_v1/tsgo ./release-artifacts/tsgo-freebsd-amd64
      #     cp ./typescript-go/dist/tsgo_freebsd_arm64/tsgo ./release-artifacts/tsgo-freebsd-arm64

      #     ls -la ./release-artifacts/

      # - name: Find TypeScript declaration files
      #   working-directory: ./typescript-go
      #   run: |
      #     find ./built/local/ -name "*.d.ts" | sort

      # - name: Copy TypeScript declaration files to npm package
      #   run: |
      #     mkdir -p npm-package/bin

      #     find ./typescript-go/built/local/ -name "*.d.ts" -exec cp {} ./npm-package/bin/ \;
      #     echo "Copied declaration files to npm-package/bin:"
      #     ls -la ./npm-package/bin/

      - name: Update package.json version
        working-directory: ./npm-package
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
          fi

      - name: Update CHANGELOG.md
        working-directory: ./npm-package
        run: |
          # Prepare changelog for new version
          NEW_CHANGELOG=$(printf "# %s (%s)\n\n## Changes in the last 6 hours:\n%s\n\n" "$VERSION" "$(date +'%Y-%m-%d')" "${{ steps.changelog.outputs.CHANGELOG }}")

          # Check if CHANGELOG.md exists
          if [ -f "CHANGELOG.md" ]; then
            # If exists, add new changelog at the beginning of the file
            EXISTING_CONTENT=$(cat CHANGELOG.md)
            echo "$NEW_CHANGELOG$EXISTING_CONTENT" > CHANGELOG.md
          else
            # If not exists, create a new file
            echo "$NEW_CHANGELOG" > CHANGELOG.md
          fi

          # Display updated CHANGELOG.md content
          echo "Updated CHANGELOG.md:"
          cat CHANGELOG.md | head -20

      - name: Commit package.json changes and changelog to repository
        working-directory: ./npm-package
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Save any changes before pulling
          git stash -u || echo "No changes to stash"

          # Pull latest changes first to ensure local repo is up-to-date
          git pull origin main --rebase

          # Apply stashed changes if any were stashed
          git stash pop || echo "No stash to pop"

          git add package.json
          git add CHANGELOG.md
          git commit -m "release: update version to $VERSION" || echo "No changes to commit"
          TAG_MESSAGE=$(printf "Release %s\n\n%s" "$VERSION" "${{ steps.changelog.outputs.CHANGELOG }}")

          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
            echo "Tag v$VERSION already exists, skipping tag creation"
          else
            git tag -a v$VERSION -m "$TAG_MESSAGE"
          fi

          # Use --force flag to force push, but use with caution
          git push origin HEAD:main || git push --force origin HEAD:main

          # Only push tag if it doesn't exist remotely
          if ! git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
            git push origin v$VERSION || echo "Failed to push tag, it may already exist remotely"
          fi

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: v${{ steps.version.outputs.version }}
      #     name: Release ${{ steps.version.outputs.version }}
      #     body: |
      #       TypeScript-Go build for ${{ steps.version.outputs.version }}

      #       This release contains the latest build of TypeScript-Go with binary executables for multiple platforms.

      #       ## Changes in the last 6 hours:
      #       ${{ steps.changelog.outputs.CHANGELOG }}
      #     draft: false
      #     prerelease: false
      #     files: ./release-artifacts/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload binaries to GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: v${{ steps.version.outputs.version }}
      #     files: ./release-artifacts/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish to npm
      #   working-directory: ./npm-package
      #   run: npm publish --provenance --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
